float sum_specular(vec3 N, vec3 L, inout float NdotL, float old_specular){
    // componente diffusiva lambertiana
    NdotL = max(dot(N, L), 0.0);

    if(NdotL > 0.0)
    {
        vec3 V = normalize( vViewPosition );    
        
        // half vector
        vec3 H = normalize(L + V);
        
        // implementazione delle formule viste nelle slide
        // spezzo in componenti

        // preparo gli angoli e i parametri che mi serviranno per il calcolo delle varie componenti
        float NdotH = max(dot(N, H), 0.0); 
        float NdotV = max(dot(N, V), 0.0); 
        float VdotH = max(dot(V, H), 0.0);
        float mSquared = m * m;
        
        // Attenuazione geometrica G
        float NH2 = 2.0 * NdotH;
        float g1 = (NH2 * NdotV) / VdotH;
        float g2 = (NH2 * NdotL) / VdotH;
        float geoAtt = min(1.0, min(g1, g2));


        // RugositÃ  D
        // Distribuzione di Beckmann
        // posso semplificare la tangente all'esponente cosi':
        // tan = sen/cos -> tan^2 = sen^2/cos^2 -> tan^2 = (1-cos)^2/cos^2
        float r1 = 1.0 / ( 4.0 * mSquared * pow(NdotH, 4.0));
        float r2 = (NdotH * NdotH - 1.0) / (mSquared * NdotH * NdotH);
        float roughness = r1 * exp(r2);
        
        // Riflettanza di Fresnel F (approx Schlick)
        float fresnel = pow(1.0 - VdotH, 5.0);
        fresnel *= (1.0 - F0);
        fresnel += F0;
        
        // metto tutto assieme per la componente speculare
        //return old_specular += ((fresnel * geoAtt * roughness) / (NdotV * NdotL * PI));
        return 1.0;
    }

}